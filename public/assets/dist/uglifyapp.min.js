var app = angular.module('app', []);

app.config(function($interpolateProvider){
    $interpolateProvider.startSymbol('{[{').endSymbol('}]}');
}).run(function ($rootScope) {
    //$rootScope.backgroundAllowed = true;
});
app.constant("Modernizr", Modernizr);

$.ajaxSetup({
    headers:{
        'X-CSRF-TOKEN':$('meta[name="csrf-token"]').attr('content')
    }
});
$.validator.setDefaults({
    errorElement: 'span'
});


app.controller('backgroundController', ['$scope','Modernizr','screenWidthService','ismobile','isBackgroundAllowed', function($scope, Modernizr,screenWidthService,ismobile,isBackgroundAllowed) {
    function changeLetterColor() {
        var cols = $('.link-color');
        var length = cols.length;
        for(i=0; i<length; i++) {
            cols[i].className = 'link-color-black';
        }
    }
    function makerainthunderday()
    {
        $('html').addClass("dialluvioso");
        if (isBackgroundAllowed) {
            var cloudsnumber;
            if (screenWidthService == 'md' || screenWidthService == 'lg') {
                cloudsnumber = 8;
                var rain = new Rain(150, 'dropstorm');
            }
            else if (screenWidthService == 'sm') {
                cloudsnumber = 6;
                var rain = new Rain(100, 'dropstorm');
            }
            else {
                cloudsnumber = 4;
                var rain = new Rain(50, 'dropstorm');
            }
            for (i = 0; i < cloudsnumber; i++) {
                var cloud = new CloudRain();
                $('body').append(cloud.getCloud());
            }
            addThunder(cloudsnumber);
        }
        changeLetterColor();
    }
    function makerainthundernight()
    {
        $('html').addClass("noche");
        if (isBackgroundAllowed) {
            var cloudsnumber;
            if (screenWidthService == 'md' || screenWidthService == 'lg') {
                cloudsnumber = 8;
                var rain = new Rain(150, 'dropstorm');
            }
            else if (screenWidthService == 'sm') {
                cloudsnumber = 6;
                var rain = new Rain(100, 'dropstorm');
            }
            else {
                cloudsnumber = 4;
                var rain = new Rain(50, 'dropstorm');
            }
            for (i = 0; i < cloudsnumber; i++) {
                var cloud = new CloudRain();
                $('body').append(cloud.getCloud());
            }
            var moon = new Moon();
            $('body').append(moon.getSun());
            addThunder(cloudsnumber);
        }
    }
    function makerainnight()
    {
        $('html').addClass("noche");
        if (isBackgroundAllowed ) {
            var cloudsnumber;
            if (screenWidthService == 'md' || screenWidthService == 'lg') {
                cloudsnumber = 12;
                var rain = new Rain(200, 'drop');
            }
            else if (screenWidthService == 'sm') {
                cloudsnumber = 8;
                var rain = new Rain(100, 'drop');
            }
            else {
                cloudsnumber = 4;
                var rain = new Rain(50, 'drop');
            }
            for (i = 0; i < cloudsnumber; i++) {
                var cloud = new CloudRain();
                $('body').append(cloud.getCloud());
            }
            var moon = new Moon();
        }
        $('body').append(moon.getSun());
    }
    function makerainday()
    {
        $('html').addClass("dialluvioso");
        if (isBackgroundAllowed) {
            var cloudsnumber;
            if (screenWidthService == 'md' || screenWidthService == 'lg') {
                cloudsnumber = 12;
                var rain = new Rain(200, 'drop');
            }
            else if (screenWidthService == 'sm') {
                cloudsnumber = 8;
                var rain = new Rain(100, 'drop');
            }
            else {
                cloudsnumber = 4;
                var rain = new Rain(50, 'drop');
            }
            for (i = 0; i < cloudsnumber; i++) {
                var cloud = new CloudRain();
                $('body').append(cloud.getCloud());
            }
        }
        changeLetterColor();
    }
    function makesnownight()
    {
        $('html').addClass("noche");
        if (isBackgroundAllowed) {
            var snownumber;
            var cloudsnumber;
            if (screenWidthService == 'md' || screenWidthService == 'lg') {
                snownumber = 150;
                cloudsnumber = 12;
            }
            else if (screenWidthService == 'sm') {
                snownumber = 100;
                cloudsnumber = 8;
            }
            else {
                snownumber = 60;
                cloudsnumber = 4;
            }
            for (i = 0; i < snownumber; i++) {
                var snow = new Snow();
                $('body').append(snow.getSnow());
            }
            for (i = 0; i < cloudsnumber; i++) {
                var cloud = new CloudSnowNight();
                $('body').append(cloud.getCloud());
            }
            var moon = new Moon();
            $('body').append(moon.getSun());
        }
    }
    function makesnowday()
    {
        $('html').addClass("dia");
        if (isBackgroundAllowed) {
            var snownumber;
            var cloudsnumber;
            if (screenWidthService=='md' || screenWidthService=='lg') {
                snownumber = 150;
                cloudsnumber = 12;
            }
            else if (screenWidthService=='sm') {
                snownumber = 100;
                cloudsnumber = 8;
            }
            else {
                snownumber = 60;
                cloudsnumber = 4;
            }
            for (i = 0; i < snownumber; i++) {
                var snow = new Snow();
                $('body').append(snow.getSnow());
            }
            for (i = 0; i < cloudsnumber; i++) {
                var cloud = new CloudSnow();
                $('body').append(cloud.getCloud());
            }
            var sun = new Sun();
            $('body').append(sun.getSun());
        }
        changeLetterColor();
    }
    //------for night--------------------
    function makenight()
    {
        $('html').addClass("noche");
        if (isBackgroundAllowed) {
            var starnumber;
            var cloudsnumber;
            if (screenWidthService=='md' || screenWidthService=='lg') {
                starnumber = 80;
                cloudsnumber = 5;
            }
            else if (screenWidthService=='sm') {
                starnumber = 60;
                cloudsnumber = 3;
            }
            else {
                starnumber = 40;
                cloudsnumber = 2;
            }
            for (i = 0; i < cloudsnumber; i++) {
                var cloud = new CloudNight();
                $('body').append(cloud.getCloud());
            }
            for (i = 0; i < starnumber; i++) {
                var star = new Star();
                $('body').append(star.getStar());
            }
            var moon = new Moon();
            $('body').append(moon.getSun());
        }
    }
    //-----------for day----------
    function makeday()
    {
        $('html').addClass("dia");
        if (isBackgroundAllowed) {
            var cloudsnumber;
            if(screenWidthService=='md' || screenWidthService=='lg') cloudsnumber=10;
            else if (screenWidthService=='sm') cloudsnumber=7;
            else cloudsnumber=5;


            for (i = 0; i < cloudsnumber; i++) {
                var  cloud= new Cloud();
                $('body').append(cloud.getCloud());
            }
            var  sun= new Sun();
            $('body').append(sun.getSun());
        }
        changeLetterColor();
    }

    var Cloud = function ()
    {
        this.type=randomIntFromInterval(1,3);
        this.move=randomIntFromInterval(100,150);
        this.left=randomIntFromInterval(1,100);
        this.top=randomIntFromInterval(1,50);
        this.scale=randomIntFromInterval(30,99);
        this.div = document.createElement('div');
        this.div.className='cloud'+this.type;
        this.getCloud = function(){
            this.div.setAttribute('style',
                '-webkit-animation: moveclouds '+this.move+'s linear infinite;'+
                '-moz-animation: moveclouds '+this.move+'s linear infinite;'+
                '-o-animation: moveclouds '+this.move+'s linear infinite;'+
                '-webkit-animation-delay:'+ this.delay+'s;'+
                '-moz-animation-delay:'+ this.delay+'s;'+
                '-o-animation-delay:'+ this.delay+'s;'+
                'left: '+this.left+'%;'+
                'top:'+this.top+'%;'+
                '-webkit-transform: scale(0.'+this.scale+');'+
                '-moz-transform: scale(0.'+this.scale+');'+
                'transform: scale(0.'+this.scale+');'
            );
            return this.div;
        };
    }
    var Sun = function ()
    {
        this.div = document.createElement('div');
        this.div.className='sun';
        this.getSun = function(){
            return this.div;
        };
    }
    var Moon= function ()
    {
        Sun.call(this);
        this.div.className='moon';
    }
    var Star= function ()
    {
        this.div = document.createElement('div');
        this.div.className='star';
        this.left=randomIntFromInterval(1,199);
        this.top=randomIntFromInterval(5,80);
        this.scale=randomIntFromInterval(30,99);
        this.div.setAttribute('style',
            'left: '+this.left+'%;'+
            'top:'+this.top+'%;'+
            '-webkit-transform: scale(0.'+this.scale+');'+
            '-moz-transform: scale(0.'+this.scale+');'+
            'transform: scale(0.'+this.scale+');'
        );
        this.getStar = function(){
            return this.div;
        };
    }
    var CloudNight = function ()
    {
        Cloud.call(this);
        this.div.className='cloud'+this.type+' cloudnight';

    }
    var Snow= function ()
    {
        this.type=randomIntFromInterval(1,3);
        this.delay=randomIntFromInterval(1,40);
        this.move=randomIntFromInterval(40,45);
        this.left=randomIntFromInterval(1,100);
        this.top=randomIntFromInterval(10,20);
        this.ketframe=randomIntFromInterval(1,2);
        this.div = document.createElement('div');
        this.div.innerHTML = '*';
        this.div.className='snow'+this.type;
        this.div.setAttribute('style',
            '-webkit-animation: snowfall'+this.ketframe+' '+this.move+'s linear infinite;'+
            '-moz-animation: snowfall'+this.ketframe+' '+this.move+'s  linear infinite;'+
            '-o-animation: snowfall'+this.ketframe+' '+this.move+'s  linear infinite;'+
            '-webkit-animation-delay:'+ this.delay+'s;'+
            '-moz-animation-delay:'+ this.delay+'s;'+
            '-o-animation-delay:'+ this.delay+'s;'+
            'left: '+this.left+'%;'+
            'top:'+this.top+'%;'
        );
        this.getSnow = function(){
            return this.div;
        };
    }
    var CloudSnow= function ()
    {
        Cloud.call(this);
        this.top=randomIntFromInterval(1,20);
    }
    var CloudSnowNight= function ()
    {
        CloudNight.call(this);
        this.top=randomIntFromInterval(1,20);
    }
    var CloudRain= function ()
    {

        CloudSnow.call(this);
        this.div.className='cloud'+this.type+' cloudrain';
    }
    var Rain= function (dropsnumber,clase)
    {
        for( i=1;i<dropsnumber;i++) {
            this.div = document.createElement('div');
            this.div.className=clase;
            this.delay=randomIntFromInterval(1,999);
            this.left=randomIntFromInterval(1,100);
            this.top=randomIntFromInterval(10,20);
            this.div.setAttribute('style',
                '-webkit-animation-delay:'+ this.delay+'ms;'+
                '-moz-animation-delay:'+ this.delay+'ms;'+
                '-o-animation-delay:'+ this.delay+'ms;'+
                'left: '+this.left+'%;'+
                'top:'+this.top+'%;'
            );
            $('body').append(this.div);
        }
    }
    var Thunder= function (x,y)
    {
        this.numberrain=10;
        this.width=5;
        for( i=1;i<=this.numberrain;i++)
        {
            this.angule=randomIntFromInterval(-40,40);
            this.div = document.createElement('div');
            this.div.className='trueno';
            this.height=randomIntFromInterval(2,10);
            if(i % 2 == 0)
            {
                this.width--;
                this.angule2=randomIntFromInterval(-40,40);
                this.div2 = document.createElement('div');
                this.div2.className='trueno';
                this.height2=randomIntFromInterval(1,5);
                this.div2.setAttribute('style',
                    /*'-webkit-animation: snowfall '+move+'s linear infinite;'+
                     '-moz-animation: snowfall '+move+'s  linear infinite;'+
                     '-o-animation: snowfall '+move+'s  linear infinite;'+*/
                    '-webkit-transform-origin: top left;-moz-transform-origin: top left;transform-origin: top left;'+
                    '-moz-transform: rotate('+this.angule2+'deg);'+
                    '-webkit-transform: rotate'+this.angule2+'deg);'+
                    'transform: rotate('+this.angule2+'deg);'+
                    'left: 0%;'+
                    'top:90%;'+
                    'width:'+this.width+'px;'+
                    'height:'+this.height2+'vh;'
                );
                this.lastdiv.appendChild(this.div2);
            }
            this.div.setAttribute('style',
                /*'-webkit-animation: thunder '+move+'s linear infinite;'+
                 '-moz-animation: thunder '+move+'s  linear infinite;'+
                 '-o-animation: thunder '+move+'s  linear infinite;'+*/
                '-webkit-transform-origin: top left;-moz-transform-origin: top left;transform-origin: top left;'+
                '-moz-transform: rotate('+this.angule+'deg);'+
                '-webkit-transform: rotate'+this.angule+'deg);'+
                'transform: rotate('+this.angule+'deg);'+
                'left: '+x+'%;'+
                'top:'+y+'%;'+
                'width:'+this.width+'px;'+
                'height:'+this.height+'vh;'
            );
            if(i==1){this.firstdiv=this.div;x=0;y=90;}
            else {
                this.lastdiv.appendChild(this.div);
            }
            this.lastdiv=this.div;
        }
        this.getThunder = function(){
            return this.firstdiv;
        };
    }
    function addThunder(cloudsnumber) {
        var  thunder= new Thunder(50,95);
        var nubes=$( ".cloudrain" ).toArray();
        var nube = randomIntFromInterval(0,cloudsnumber-1);
        nubes[nube].appendChild(thunder.getThunder());
        setTimeout(function(){
            thunder.getThunder().remove();
        }, 900);
        var rand = randomIntFromInterval(3000,5000);
        setTimeout(function() {
            addThunder(cloudsnumber);
        }, rand);
    };
    function randomIntFromInterval(min,max)
    {
        return Math.floor(Math.random()*(max-min+1)+min);
    }
    function backgroundController()
    {
        switch(randomIntFromInterval(1,8)) {
            case 1:
                makeday();
                break;
            case 2:
                makenight();
                break;
            case 3:
                makesnowday();
                break;
            case 4:
                makesnownight();
                break;
            case 5:
                makerainday();
                break;
            case 6:
                makerainnight();
                break;
            case 7:
                makerainthundernight();
                break;
            case 8:
                makerainthunderday();
                break;

            default:
                makeday();
        }
    }
    backgroundController();
}]);






app.controller('chatController', ['$scope','$rootScope','Modernizr', function($scope,$rootScope  , Modernizr) {
    //var chat = $("#chatwindow");
    //var msg = $("#messagebox");
    //
    //var socket = new WebSocket("ws://127.0.0.1:2000");
    //var open=false;
    //
    //function addMessage(msg)
    //{
    //    chat.html( chat.html()+"<p>"+msg+"</p>");
    //}
    //
    //msg.keypress( function (event) {
    //    if (event.charCode != 13)
    //        return;
    //    if (msg.val() == "" || !open)
    //        return;
    //
    //    event.preventDefault();
    //    socket.send(JSON.stringify({
    //        id:'2',
    //        msg: msg.val(),
    //        chatroom:'22'
    //    }));
    //    conn.send(JSON.stringify({command: "subscribe", channel: "mychannel"}));
    //
    //    addMessage(msg.val());
    //    msg.val("");
    //});
    //
    //socket.onopen=function()
    //{
    //    open = true;
    //    addMessage("Connected");
    //
    //}
    //socket.onmessage=function(evt)
    //{
    //    var data = JSON.parse(evt.data);
    //    addMessage(data.msg);
    //}
    //socket.onclose=function()
    //{
    //    open = false;
    //    addMessage("Disconnected");
    //}



}]);






app.controller('homeController', ['$scope','$rootScope', function($scope,$rootScope) {

}]);






app.controller('loginController', ['$scope', function($scope) {
    $scope.login=false;
    $scope.register=false;
    $scope.password=false;
    $scope.$watch('loginTab', function () {
        $scope.state($scope.loginTab);
    });
    $scope.state = function(flag) {
        //
        switch(flag) {
            case 'login':
                loginValidator.resetForm();
                $scope.login=true;
                $scope.register=false;
                $scope.password=false;
                break;
            case 'register':
                registerValidator.resetForm();
                $scope.login=false;
                $scope.register=true;
                $scope.password=false;
                break;
            case 'password':
                passwordValidator.resetForm();
                $scope.login=false;
                $scope.register=false;
                $scope.password=true;
                break;
            default:
                loginValidator.resetForm();
                $scope.login=true;
                $scope.register=false;
                $scope.password=false;
                break;
        }
    };
    $scope.cleanAdvice = function() {
        $('.advice').remove()
    };

    var loginValidator=$("#login").validate({
        submitHandler: function(form) {
            $('#login_button').attr('pressed',true);
            form.submit();
        }
    });
    var registerValidator=$("#register-form").validate({
        rules: {
            email:{
             //check_email:true
             remote:
             {
                 type: "POST",
                 url: 'register/emailverification',
                 data: {
                     email: function() {
                         return $( ".register-email" ).val();
                     }
                 }
             }
            },
            password: {
                minlength:6
            },
            password_confirmation: {
                minlength:6,
                equalTo: "#password"
            }
        },
        submitHandler: function(form) {
            $('#register_button').attr('pressed',true);
            form.submit();
        }
    });
    var passwordValidator=$("#password-form").validate({
        submitHandler: function(form) {
            $('#password_button').attr('pressed',true);
            form.submit();
        }
    });
}]);






app.controller('resetController', ['$scope', function($scope) {
    $("#reset-form").validate({
        rules: {
            password: {
                minlength:6
            },
            password_confirmation: {
                minlength:6,
                equalTo: "#password"
            }
        },
        submitHandler: function(form) {
            $('#register_button').attr('pressed',true);
            form.submit();
        }
    });
}]);





app
.directive('inputClear', function () {
    return {
        restrict: 'A',
        link: function (scope, element) {
            $(element).val(null);
        }
    };
});
app.factory('screenWidthService', function() {
    var size;
    var screenwidth=$( window ).width();
    if (1199<screenwidth) size='lg';
    else if(991<screenwidth && screenwidth<1200) size='md';
    else if (767<screenwidth && screenwidth<992)  size='sm';
    else  size='xs';
    return size;
})
.factory('ismobile', function() {
    var backgroundanimationallowed = false; //initiate as false
    if(/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|ipad|iris|kindle|Android|Silk|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(navigator.userAgent)
        || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(navigator.userAgent.substr(0,4))) backgroundanimationallowed = true;
    return backgroundanimationallowed;
})
.factory('isBackgroundAllowed',['$location','ismobile','Modernizr', function($location,ismobile,Modernizr) {
    if (!Modernizr.cssall) {
        return false
    }
    if (ismobile)
    {
        return false
    }
    if (window.location.pathname=="" || window.location.pathname=="/" ) {
        return false
    } //for home background
    return true;
}])


var Game = {

    preload : function() {
        // Here we load all the needed resources for the level.
        // In our case, that's just two squares - one for the snake body and one for the apple.
        game.load.image('snake1', './assets/images/snake1.png');
        game.load.image('apple', './assets/images/apple.png');
        game.load.image('orange', './assets/images/orange.png');
        game.load.image('banana', './assets/images/banana.png');
        game.load.spritesheet('boom', 'assets/images/boom.png', 15, 15,7);
    },
    create : function() {
        squareSize = 15;                // The length of a side of the squares. Our image is 15x15 pixels.
        countover = 10;
        speed = 0;                      // Game speed.
        updateDelay = 0;                // A variable for control over update rates.
        textStyle_Key = { font: "bold 14px sans-serif", fill: "#46c0f9", align: "center" };
        textStyle_Value = { font: "bold 18px sans-serif", fill: "#fff", align: "center" };
        snake1= new Snake('Player 1','snake1',1);
        snake1.generateScore(textStyle_Key, textStyle_Value, 30, 20);
        apple= new Fruit('apple',3);
        orange= new Fruit('orange',2);
        banana= new Fruit('banana',1);
        cursors = game.input.keyboard.createCursorKeys();
        snakes = [snake1];




        game.stage.backgroundColor = '#061f27';
        // Speed.

        game.add.text(500, 20, "SPEED", textStyle_Key);
        speedTextValue = game.add.text(558, 18, speed.toString(), textStyle_Value);



    },
    update: function() {

        //----------------------------------controls

        if (cursors.right.isDown && snake1.direction!='left')
        {
            snake1.newdirection = 'right';
        }
        else if (cursors.left.isDown && snake1.direction!='right')
        {
            snake1.newdirection = 'left';
        }
        else if (cursors.up.isDown && snake1.direction!='down')
        {
            snake1.newdirection = 'up';
        }
        else if (cursors.down.isDown && snake1.direction!='up')
        {
            snake1.newdirection = 'down';
        }


        // A formula to calculate game speed based on the score.
        // The higher the score, the higher the game speed, with a maximum of 10;
        speed = Math.min(10, Math.floor(snake1.score/5));

        // Update speed value on game screen.
        speedTextValue.text = '' + speed;

        // Since the update function of Phaser has an update rate of around 60 FPS,
        // we need to slow that down make the game playable.

        // Increase a counter on every update call.
        updateDelay++;

        // Do game stuff only if the counter is aliquot to (10 - the game speed).
        // The higher the speed, the more frequently this is fulfilled,
        // making the snake move faster.
        if (updateDelay % (10 - speed) == 0) {
            snake1.move();
            snake1.grow();

            // Check for apple collision.
            fruitCollision(snake1, apple);
            fruitCollision(snake1, orange);
            fruitCollision(snake1, banana);

            // Check for collision with self. Parameter is the head of the snake.
            snakeCollision(snake1, snake1);

            //// Check with collision with wall. Parameter is the head of the snake.
            wallCollision(snake1);
            //game.state.start('Game_Over');
            if (!snake1.alive ) {
                countover--;
                if(countover==0)
                {
                    game.state.start('Game_Over',true,true,snakes);
                }
            }
        }
    }
};


var Game2 = {

    preload : function() {
        // Here we load all the needed resources for the level.
        // In our case, that's just two squares - one for the snake body and one for the apple.
        game.load.image('snake1', './assets/images/snake1.png');
        game.load.image('snake2', './assets/images/snake2.png');
        game.load.image('apple', './assets/images/apple.png');
        game.load.image('orange', './assets/images/orange.png');
        game.load.image('banana', './assets/images/banana.png');
        game.load.spritesheet('boom', 'assets/images/boom.png', 15, 15,7);
    },
    create : function() {
        squareSize = 15;                // The length of a side of the squares. Our image is 15x15 pixels.
        speed = 0;                      // Game speed.
        updateDelay = 0;                // A variable for control over update rates.
        countover = 20;
        textStyle_Key = { font: "bold 14px sans-serif", fill: "#46c0f9", align: "center" };
        textStyle_Value = { font: "bold 18px sans-serif", fill: "#fff", align: "center" };
        snake1= new Snake('Player 1','snake1',1);
        snake2= new Snake('Player 2','snake2',4);
        snake1.generateScore(textStyle_Key, textStyle_Value, 10, 10);
        snake2.generateScore(textStyle_Key, textStyle_Value, 10, 25);
        apple= new Fruit('apple',3);
        orange= new Fruit('orange',2);
        banana= new Fruit('banana',1);
        snakes = [snake1,snake2];

        cursors = game.input.keyboard.createCursorKeys();
        //-------------------------------for second player
        player2up = game.input.keyboard.addKey(Phaser.Keyboard.W);
        player2down = game.input.keyboard.addKey(Phaser.Keyboard.S);
        player2left = game.input.keyboard.addKey(Phaser.Keyboard.A);
        player2right = game.input.keyboard.addKey(Phaser.Keyboard.D);


        game.stage.backgroundColor = '#061f27';
        // Speed.

        game.add.text(500, 20, "SPEED", textStyle_Key);
        speedTextValue = game.add.text(558, 18, speed.toString(), textStyle_Value);

    },
    update: function() {

        //----------------------------------controls

        if (cursors.right.isDown && snake1.direction!='left')
        {
            snake1.newdirection = 'right';
        }
        else if (cursors.left.isDown && snake1.direction!='right')
        {
            snake1.newdirection = 'left';
        }
        else if (cursors.up.isDown && snake1.direction!='down')
        {
            snake1.newdirection = 'up';
        }
        else if (cursors.down.isDown && snake1.direction!='up')
        {
            snake1.newdirection = 'down';
        }




        if (player2right.isDown &&  snake2.direction !='left')
        {
            snake2.newdirection = 'right';
        }
        else if (player2left.isDown && snake2.direction!='right')
        {
            snake2.newdirection = 'left';
        }
        else if (player2up.isDown && snake2.direction!='down')
        {
            snake2.newdirection = 'up';
        }
        else if (player2down.isDown && snake2.direction!='up')
        {
            snake2.newdirection = 'down';
        }


        // A formula to calculate game speed based on the score.
        // The higher the score, the higher the game speed, with a maximum of 10;
        speed = Math.min(10, Math.floor((snake1.score + snake2.score)/5));

        // Update speed value on game screen.
        speedTextValue.text = '' + speed;

        // Since the update function of Phaser has an update rate of around 60 FPS,
        // we need to slow that down make the game playable.

        // Increase a counter on every update call.
        updateDelay++;

        // Do game stuff only if the counter is aliquot to (10 - the game speed).
        // The higher the speed, the more frequently this is fulfilled,
        // making the snake move faster.
        if (updateDelay % (10 - speed) == 0) {
            snake1.move();
            snake1.grow();
            snake2.move();
            snake2.grow();

            // Check for apple collision.
            fruitCollision(snake1,apple);
            fruitCollision(snake1,orange);
            fruitCollision(snake1,banana);

            fruitCollision(snake2,apple);
            fruitCollision(snake2,orange);
            fruitCollision(snake2,banana);

            // Check for collision with self. Parameter is the head of the snake.
            snakeCollision(snake1,snake1);
            snakeCollision(snake1,snake2);
            snakeCollision(snake2,snake2);
            snakeCollision(snake2,snake1);

            //// Check with collision with wall. Parameter is the head of the snake.
            wallCollision(snake1);
            wallCollision(snake2);

            if (!snake1.alive || !snake2.alive) {
                countover--;
                if(countover==0)
                {
                    game.state.start('Game_Over',true,true,snakes);
                }
            }

        }

    }



};


var Gamem = {

    preload : function() {
        // Here we load all the needed resources for the level.
        // In our case, that's just two squares - one for the snake body and one for the apple.
        game.load.image('snake1', './assets/images/snake1.png');
        game.load.image('snake2', './assets/images/snake2.png');
        game.load.image('snake3', './assets/images/snake3.png');
        game.load.image('snake4', './assets/images/snake4.png');
        game.load.image('snake5', './assets/images/snake5.png');
        game.load.image('snake6', './assets/images/snake6.png');
        game.load.image('snake7', './assets/images/snake7.png');
        game.load.image('snake8', './assets/images/snake8.png');
        game.load.image('apple', './assets/images/apple.png');
        game.load.image('orange', './assets/images/orange.png');
        game.load.image('banana', './assets/images/banana.png');
        game.load.spritesheet('boom', 'assets/images/boom.png', 15, 15,7);
    },
    create : function() {
        squareSize = 15;                // The length of a side of the squares. Our image is 15x15 pixels.
        speed = 0;                      // Game speed.
        updateDelay = 0;                // A variable for control over update rates.
        numberplayers=8;
        player=1;
        countover = 20;
        textStyle_Key = { font: "bold 14px sans-serif", fill: "#46c0f9", align: "center" };
        textStyle_Value = { font: "bold 18px sans-serif", fill: "#fff", align: "center" };
        snakes = [];
        scorespace=10;

        for(var i=0; i<numberplayers;i++)
        {
            snakes[i]= new Snake('Player '+ (i+1),'snake'+(i+1),(i+1));
            //snakes[i].generateScore(textStyle_Key, textStyle_Value, 10, scorespace);
            scorespace=scorespace+15;
        }
        apple= new Fruit('apple',3);
        orange= new Fruit('orange',2);
        banana= new Fruit('banana',1);


        cursors = game.input.keyboard.createCursorKeys();

        game.stage.backgroundColor = '#061f27';
        // Speed.

        game.add.text(500, 20, "SPEED", textStyle_Key);
        speedTextValue = game.add.text(558, 18, speed.toString(), textStyle_Value);

        player--;

    },
    update: function() {

        //----------------------------------controls

        if (cursors.right.isDown && snakes[player].direction!='left')
        {
            snakes[player].newdirection = 'right';
        }
        else if (cursors.left.isDown && snakes[player].direction!='right')
        {
            snakes[player].newdirection = 'left';
        }
        else if (cursors.up.isDown && snakes[player].direction!='down')
        {
            snakes[player].newdirection = 'up';
        }
        else if (cursors.down.isDown && snakes[player].direction!='up')
        {
            snakes[player].newdirection = 'down';
        }

        // A formula to calculate game speed based on the score.
        // The higher the score, the higher the game speed, with a maximum of 10;
        speed = Math.min(10, Math.floor(snakes[0].score/5));

        // Update speed value on game screen.
        speedTextValue.text = '' + speed;

        // Since the update function of Phaser has an update rate of around 60 FPS,
        // we need to slow that down make the game playable.

        // Increase a counter on every update call.
        updateDelay++;

        // Do game stuff only if the counter is aliquot to (10 - the game speed).
        // The higher the speed, the more frequently this is fulfilled,
        // making the snake move faster.
        if (updateDelay % (10 - speed) == 0) {
            var survivors = 0;
            for(var i=0; i<numberplayers;i++)
            {
                snakes[i].move();
                snakes[i].grow();
                fruitCollision(snakes[i],apple);
                fruitCollision(snakes[i],orange);
                fruitCollision(snakes[i],banana);
                wallCollision(snakes[i]);
                for(var j=0; j<numberplayers;j++) {
                    snakeCollision(snakes[i],snakes[j]);
                }
                if (snakes[i].alive) survivors++;
            }
            if(survivors<2)
            {
                countover--;
                if(countover==0)
                {
                    game.state.start('Game_Over',true,true,snakes);
                }
            }
        }

    }



};
var Game_Over = {

    preload : function() {
        // Load the needed image for this game screen.
        game.load.image('gameover', './assets/images/gameover.png');
    },

    create : function() {

        var first = {};
        var second = {};
        var third = {};
        var maxscore=0;
        var secondmaxscore=0;
        var thirdmaxscore=0;
        for (var i = 0; i < snakes.length; i++) {
            if(!snakes[i].alive)
            {
                if(snakes[i].score>=maxscore)
                {
                    third=second;
                    second=first;
                    first = snakes[i];
                    maxscore=snakes[i].score;
                }

                else if(snakes[i].score>=secondmaxscore)
                {
                    third=second;
                    second = snakes[i];
                    secondmaxscore=snakes[i].score;
                }
                else if(snakes[i].score>=thirdmaxscore)
                {
                    third= snakes[i];
                    thirdmaxscore=snakes[i].score;
                }

            }

        }
        maxscore=0;
        secondmaxscore=0;
        thirdmaxscore=0;
        for (var i = 0; i < snakes.length; i++) {
            if(snakes[i].alive)
            {

                if(snakes[i].score>=maxscore)
                {
                    third=second;
                    second=first;
                    first = snakes[i];
                    maxscore=snakes[i].score;
                }

                else if(snakes[i].score>=secondmaxscore)
                {
                    third=second;
                    second = snakes[i];
                    secondmaxscore=snakes[i].score;
                }
                else if(snakes[i].score>=thirdmaxscore)
                {
                    third= snakes[i];
                    thirdmaxscore=snakes[i].score;
                }
            }

        }
        // Create button to start game like in Menu.
        this.add.button(0, 0, 'gameover', this.startGame, this);


        game.add.text(235, 310, first.name+': ', { font: "bold 16px sans-serif", fill: "#46c0f9", align: "center"});
        game.add.text(350, 308, first.score.toString() + ' Winner!!', { font: "bold 20px sans-serif", fill: "#fff", align: "center" });
        if(!isEmpty(second))
        {
            game.add.text(235, 330, second.name+': ', { font: "bold 16px sans-serif", fill: "#46c0f9", align: "center"});
            game.add.text(350, 328, second.score.toString(), { font: "bold 20px sans-serif", fill: "#fff", align: "center" });
        }
        if(!isEmpty(third))
        {
            game.add.text(235, 350, third.name+': ', { font: "bold 16px sans-serif", fill: "#46c0f9", align: "center"});
            game.add.text(350, 348, third.score.toString(), { font: "bold 20px sans-serif", fill: "#fff", align: "center" });
        }
    },

    startGame: function () {
        // Change the state back to Game.
        this.state.start('Game');

    }
};
var game,squareSize, speed,updateDelay,cursors, speedTextValue;
var gameMode=2;

var Menu = {
    preload: function()
    {
        game.load.image('menu','./assets/images/menu.png');
    },
    create:function()
    {
        this.add.button(0, 0, 'menu',this.startGame,this);
    },
    startGame: function()
    {
        if(gameMode==1) this.state.start('Game');
        if(gameMode==2) this.state.start('Game2');
        if(gameMode==3) this.state.start('Gamem');
    }
};


game = new Phaser.Game(600, 450, Phaser.AUTO, 'snake-container');

game.state.add('Menu',Menu);
//game.state.add('Game', Game);
if(gameMode==1) game.state.add('Game', Game);
if(gameMode==2) game.state.add('Game2', Game2);
if(gameMode==3) game.state.add('Gamem', Gamem);

game.state.add('Game_Over', Game_Over);

game.state.start('Menu');








var Snake= function (player,skin,startPosition)
{
        this.name=player || 'player',
        this.body=[],
        this.initialBody=8,
        this.bodySkin=skin || 'snake',
        this.score=0,
        this.direction='',
        this.newdirection=null,
        this.addNew=0,
        this.scoreTextValue='',
        this.oldLastCellx=0,
        this.oldLastCelly=0;
        this.startPosition=startPosition || 1;
        this.alive=true;

        switch (this.startPosition)
        {
            case 1:
                this.startPositiony=90;
                this.direction= 'right';
                break;
            case 2:
                this.startPositiony=180;
                this.direction= 'right';
                break;
            case 3:
                this.startPositiony=270;
                this.direction= 'right';
                break;
            case 4:
                this.startPositiony=360;
                this.direction= 'right';
                break;
            case 5:
                this.startPositiony=90;
                this.direction= 'left';
                break;
            case 6:
                this.startPositiony=180;
                this.direction= 'left';
                break;
            case 7:
                this.startPositiony=270;
                this.direction= 'left';
                break;
            case 8:
                this.startPositiony=360;
                this.direction= 'left';
                break;
        }

    this.getFirstCell = function()
    {
        return this.body[this.body.length - 1];
    }
    this.getLastCell =function ()
    {
        return this.body.shift();
    }

    this.move = function()
    {
        if(this.alive)
        {
            lastCell = this.getLastCell(),
                firstCell = this.getFirstCell();
            this.oldLastCellx=lastCell.x,
                this.oldLastCelly=lastCell.y;
            if(this.direction == 'right'){

                lastCell.x = firstCell.x + 15;
                lastCell.y = firstCell.y;
            }
            else if(this.direction == 'left'){
                lastCell.x = firstCell.x - 15;
                lastCell.y = firstCell.y;
            }
            else if(this.direction== 'up'){
                lastCell.x = firstCell.x;
                lastCell.y = firstCell.y - 15;
            }
            else if(this.direction == 'down'){
                lastCell.x = firstCell.x;
                lastCell.y = firstCell.y + 15;
            }

            if(this.newdirection){
                this.direction = this.newdirection;
                this.newdirection = null;
            }

            if(this.direction == 'right'){

                lastCell.x = firstCell.x + 15;
                lastCell.y = firstCell.y;
            }
            else if(this.direction == 'left'){
                lastCell.x = firstCell.x - 15;
                lastCell.y = firstCell.y;
            }
            else if(this.direction == 'up'){
                lastCell.x = firstCell.x;
                lastCell.y = firstCell.y - 15;
            }
            else if(this.direction == 'down'){
                lastCell.x = firstCell.x;
                lastCell.y = firstCell.y + 15;
            }


            // Place the last cell in the front of the stack.
            // Mark it the first cell.

            this.body.push(lastCell);
            firstCell = lastCell;
        }


    }

    this.generateBody = function ()
    {
        for(var i = 0; i < this.initialBody; i++){
            if(this.direction=='right')
            {
                this.body[i] = game.add.sprite(15+i*squareSize, this.startPositiony, this.bodySkin);
            }
            else
            {
                this.body[i] = game.add.sprite(570-i*squareSize, this.startPositiony, this.bodySkin);
            }
        }
    }
    this.generateScore = function (styleKey,styleValue,x,y)
    {
        game.add.text(x, y, this.name+': ' , styleKey);
        this.scoreTextValue = game.add.text(x+70, y-2, this.score.toString(), styleValue);
    }

    this.grow = function ()
    {
        if(this.addNew>0){
            this.body.unshift(game.add.sprite(this.oldLastCellx, this.oldLastCelly, this.bodySkin));
            this.addNew--;
        }
    }
    this.snakeDie = function ()
    {

        var length=this.body.length;
        for(var i = 0; i < length; i++){

            //if(this.body[i].alive) alert(this.body[i].alive);
            this.body[i].loadTexture('boom', 0);

            var cellkill=this.body[i].animations.add('explode');
            cellkill.killOnComplete = true;
            this.body[i].animations.play('explode', 7, false);
            cellkill.onComplete.add(function() {
                this.kill();

            },this.body[i]);
        }
        this.alive=false;
    }
    this.generateBody();

}

var Fruit = function (name, value)
{
    this.name = name || 'apple';
    this.value = value || 1;
    this.posx =  0,
        this.posy  = 0;
    this.fruitInstance;

    // Add a new apple.
    this.createFruit = function()
    {
        this.posx =  Math.floor(Math.random() * 40 ) * squareSize,
            this.posy  = Math.floor(Math.random() * 30 ) * squareSize;
        this.fruitInstance = game.add.sprite(this.posx, this.posy, this.name);
    }
    this.createFruit();
    this.destroyFruit = function ()
    {
        this.fruitInstance.destroy();
    }
}

function snakeCollision(snake,snake2) {
    if(snake.alive)
    {
        head=snake.getFirstCell();
        // Check if the head of the snake overlaps with any part of the snake.
        for(var i = 0; i < snake2.body.length - 1; i++){
            if(head.x == snake2.body[i].x && head.y == snake2.body[i].y){

                //game.state.start('Game_Over');
                snake.snakeDie();
            }
        }
    }
}
function fruitCollision(snake,fruit) {
    if(snake.alive) {
        // Check if any part of the snake is overlapping the apple.
        // This is needed if the apple spawns inside of the snake.
        for (var i = 0; i < snake.body.length; i++) {
            if (snake.body[i].x == fruit.fruitInstance.x && snake.body[i].y == fruit.fruitInstance.y) {

                // Next time the snake moves, a new block will be added to its length.
                snake.addNew = snake.addNew + fruit.value;

                // Destroy the old apple.
                fruit.destroyFruit();
                fruit.createFruit();
                // Make a new one.

                // Increase score.
                if(fruit.name=='apple') snake.score=snake.score+3;
                else if(fruit.name=='orange') snake.score=snake.score+2;
                else if(fruit.name=='banana') snake.score++;

                // Refresh scoreboard.

                snake.scoreTextValue.text = snake.score.toString();

            }
        }
    }
}
function wallCollision(snake) {
    if(snake.alive) {
        head = snake.getFirstCell();
        // Check if the head of the snake is in the boundaries of the game field.

        if (head.x >= 600 || head.x < 0 || head.y >= 450 || head.y < 0) {
            snake.snakeDie();
        }
    }
}
function isEmpty(obj) {

    // null and undefined are "empty"
    if (obj == null) return true;

    // Assume if it has a length property with a non-zero value
    // that that property is correct.
    if (obj.length > 0)    return false;
    if (obj.length === 0)  return true;

    // Otherwise, does it have any properties of its own?
    // Note that this doesn't handle
    // toString and valueOf enumeration bugs in IE < 9
    for (var key in obj) {
        if (hasOwnProperty.call(obj, key)) return false;
    }

    return true;
}
